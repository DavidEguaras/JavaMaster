 We can think of classes as blueprints for creating objects of that class, and this also helps us understand static and non-static, for example:
    +NON-STATIC
        -Lets say you have class called Cat, with a method meow(), you can 'tell' an object of the class cat to meow, but you cant tell the blueprint to meow:
            Cat mycat = new Cat();
            myCat.meow();

            ❌Cat.meow();❌
        -BUT this is how NON-STATIC METHODS work

    +STATIC
        -As we all now, cats have 9 lives, since this is common to ALL cats, it is a value that the blueprint holds, so that is a static value
            Public Class Cat{
                static int catLives = 9;

                static void printCatLives(){
                    System.out.println("Cats have "+ catLives +" lives")
                }
            }